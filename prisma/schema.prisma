generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int          @id @default(autoincrement()) @map("user_id")
  email        String       @unique @map("email") @db.VarChar(128)
  password     String?      @map("password") @db.VarChar(128)
  firstName    String       @map("name") @db.VarChar(128)
  lastName     String       @map("surname") @db.VarChar(128)
  status       EUserStatus? @default(ACTIVE) @map("status")
  refreshToken String?      @map("refresh_token") @db.VarChar(128)
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
  userRoles    UserRoles[]

  @@map("users")
}

model Role {
  roleId      Int         @id @default(autoincrement()) @map("role_id")
  roleName    String      @unique @map("title") @db.VarChar(128)
  description String?     @map("description") @db.VarChar(128)
  userRoles   UserRoles[]

  @@map("roles")
}

model UserRoles {
  userId     Int      @map("user_id")
  roleId     Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamptz(3)
  user       User     @relation(fields: [userId], references: [userId])
  role       Role     @relation(fields: [roleId], references: [roleId])

  @@id([roleId, userId])
  @@map("user_roles")
}

model File {
  fileId   Int      @id @default(autoincrement()) @map("file_id")
  fileName String   @unique @map("title") @db.VarChar(128)
  fileType String   @map("type") @db.VarChar(128)
  uploadAt DateTime @default(now()) @map("upload_at") @db.Timestamptz(3)

  @@map("files")
}

enum EUserStatus {
  ACTIVE
  BLOCKED
}
